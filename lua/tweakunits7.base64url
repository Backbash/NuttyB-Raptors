--NuttyB T4 Air rework
-- Authors: BackBash
-- docs.google.com/spreadsheets/d/1QSVsuAAMhBrhiZdTihVfSCwPzbbZWDLCtXWP23CU0ko
{legfortt4={customparams={i18n_en_humanname='Experimental Tyrannus',i18n_en_tooltip='In dedication to our commander Tyrannus'},weapondefs={machinegun={accuracy=400,areaofeffect=64,avoidfriendly=false,avoidfeature=false,collidefriendly=false,collidefeature=true,beamtime=0.09,corethickness=0.55,duration=0.09,burst=1,burstrate=0.1,explosiongenerator="custom:genericshellexplosion-tiny-aa",energypershot=0,falloffrate=0,firestarter=50,interceptedbyshieldtype=4,intensity=2,name="scav rapid fire plasma gun",range=1000,reloadtime=0.1,weapontype="LaserCannon",rgbcolor="1 0 0",rgbcolor2="1 1 1",soundtrigger=true,soundstart="tgunshipfire",texture1="shot",texture2="explo2",thickness=8.5,tolerance=1000,turret=true,weaponvelocity=1000,damage={default=60}},heatray1={allowNonBlockingAim=true,avoidfriendly=true,areaofeffect=64,avoidfeature=false,beamtime=0.033,camerashake=0.1,collidefriendly=false,corethickness=0.45,craterareaofeffect=12,craterboost=0,cratermult=0,edgeeffectiveness=1,energypershot=0,explosiongenerator="custom:heatray-large",firestarter=90,firetolerance=300,impulsefactor=0,intensity=9,laserflaresize=8,name='Experimental Thermal Ordnance Generators',noselfdamage=true,proximitypriority=-1,range=850,reloadtime=0.033,rgbcolor="1 0.55 0",rgbcolor2="0.9 1.0 0.5",scrollspeed=5,soundhitdry='heatray3start',soundhitwet='sizzle',soundstart='heatray3lp',soundstartvolume=6,soundtrigger=1,thickness=6,turret=true,weapontype='BeamLaser',weaponvelocity=1500,damage={default=150}},ata={areaofeffect=34,avoidfeature=false,beamtime=2,collidefriendly=false,corethickness=0.5,craterareaofeffect=0,craterboost=0,cratermult=0,edgeeffectiveness=0.30,energypershot=7000,explosiongenerator='custom:laserhit-large-blue',firestarter=90,impulsefactor=0,largebeamlaser=true,laserflaresize=7,name='Heavy long-range g2g tachyon accelerator beam',noselfdamage=true,range=1300,reloadtime=15,rgbcolor='0 1 1',scrollspeed=5,soundhitdry='',soundhitwet='sizzle',soundstart='raptorlaser',soundtrigger=1,soundstartvolume=4,texture3='largebeam',thickness=10,tilelength=150,tolerance=10000,turret=true,weapontype='BeamLaser',weaponvelocity=3100,damage={commanders=480,default=48000}}},weapons={[1]={badtargetcategory="NOTLAND",def="heatray1",maindir="-1 0 0",maxangledif=210,onlytargetcategory="SURFACE"},[2]={badtargetcategory="NOTLAND",def="heatray1",maindir="1 0 0",maxangledif=210,onlytargetcategory="SURFACE"},[3]={def="ata",maindir="1 0 0",maxangledif=190,onlytargetcategory="SURFACE"},[4]={def="machinegun",onlytargetcategory="SURFACE"},[5]={def="machinegun",onlytargetcategory="SURFACE"}}}}