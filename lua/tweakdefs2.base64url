--NuttyB v1.52b Def Main
-- Authors: ChrispyNut, BackBash
-- docs.google.com/spreadsheets/d/1QSVsuAAMhBrhiZdTihVfSCwPzbbZWDLCtXWP23CU0ko
local a,b,pairs,c=UnitDefs or{},'repulsor',pairs,table.merge;function addWeapon(d,e,f)a[d]=a[d]or{}a[d].weapons=a[d].weapons or{}a[d].weapondefs=a[d].weapondefs or{}a[d].customparams=a[d].customparams or{}table.insert(a[d].weapons,{def=b,onlytargetcategory=f or''})a[d].weapondefs[b]=e;if e.shield and e.shield.power>0 then e.range=e.shield.radius;a[d].customparams=c(a[d].customparams or{},{off_on_stun='1',shield_color_mult=0.8,shield_power=e.shield.power,shield_radius=e.shield.radius})end end;for g,h in ipairs({'armcom','armcomlvl2','armcomlvl3','armcomlvl4','corcom','corcomlvl2','corcomlvl3','corcomlvl4','legcom','legcomlvl2','legcomlvl3','legcomlvl4','legcomlvl5'})do addWeapon(h,{avoidfeature=0,craterareaofeffect=0,craterboost=0,cratermult=0,edgeeffectiveness=0.15,name='PlasmaRepulsor',range=50,soundhitwet='sizzle',weapontype='Shield',damage={default=100},shield={alpha=0.15,armortype='shields',energyuse=1,force=2.5,intercepttype=1,power=500,powerregen=3,powerregenenergy=3,radius=100,repulser=1,smart=1,startingpower=100,visiblerepulse=1,badcolor={1,0.2,0.2,0.2},goodcolor={0.2,1,0.2,0.17}}})end;for i,j in pairs(a)do if string.sub(i,1,24)=='raptor_air_fighter_basic'then if j.weapondefs then for g,k in pairs(j.weapondefs)do k.name='Spike'k.accuracy=200;k.collidefriendly=0;k.collidefeature=0;k.avoidfeature=0;k.avoidfriendly=0;k.areaofeffect=64;k.edgeeffectiveness=0.3;k.explosiongenerator='custom:raptorspike-large-sparks-burn'k.cameraShake={}k.dance={}k.interceptedbyshieldtype=0;k.model='Raptors/spike.s3o'k.reloadtime=1.1;k.soundstart='talonattack'k.startvelocity=200;k.submissile=1;k.smoketrail=0;k.smokePeriod={}k.smoketime={}k.smokesize={}k.smokecolor={}k.soundhit={}k.texture1={}k.texture2={}k.tolerance={}k.tracks=0;k.turnrate=60000;k.weaponacceleration=100;k.weapontimer=1;k.weaponvelocity=1000;k.weapontype={}k.wobble={}end end elseif i:match'^[acl][ore][rgm]com'and not i:match'_scav$'then table.mergeInPlace(j,{customparams={combatradius=0,fall_damage_multiplier=0,paratrooper=1,wtboostunittype={}},featuredefs={dead={damage=560000,reclaimable=0}}})end end;local l={raptor_air_kamikaze_basic_t2_v1={selfdestructas='raptor_empdeath_big'},raptor_land_swarmer_emp_t2_v1={weapondefs={raptorparalyzersmall={damage={shields=70},paralyzetime=6}}},raptor_land_assault_emp_t2_v1={weapondefs={raptorparalyzerbig={damage={shields=150},paralyzetime=10}}},raptor_allterrain_arty_emp_t2_v1={weapondefs={goolauncher={paralyzetime=6}}},raptor_allterrain_arty_emp_t4_v1={weapondefs={goolauncher={paralyzetime=10}}},raptor_air_bomber_emp_t2_v1={weapondefs={weapon={damage={shields=1100,default=2000},paralyzetime=10}}},raptor_allterrain_swarmer_emp_t2_v1={weapondefs={raptorparalyzersmall={damage={shields=70},paralyzetime=6}}},raptor_allterrain_assault_emp_t2_v1={weapondefs={raptorparalyzerbig={damage={shields=150},paralyzetime=6}}},raptor_matriarch_electric={weapondefs={goo={paralyzetime=13},melee={paralyzetime=13},spike_emp_blob={paralyzetime=13}}}}for m,n in pairs(l)do if a[m]then a[m]=c(a[m],n)end end;for g,o in pairs({'raptor_antinuke','raptor_turret_acid_t2_v1','raptor_turret_acid_t3_v1','raptor_turret_acid_t4_v1','raptor_turret_antiair_t2_v1','raptor_turret_antiair_t3_v1','raptor_turret_antiair_t4_v1','raptor_turret_antinuke_t2_v1','raptor_turret_antinuke_t3_v1','raptor_turret_basic_t2_v1','raptor_turret_basic_t3_v1','raptor_turret_basic_t4_v1','raptor_turret_burrow_t2_v1','raptor_turret_emp_t2_v1','raptor_turret_emp_t3_v1','raptor_turret_emp_t4_v1','raptor_worm_green'})do local p=a[o]p.maxthisunit=10;p.health=p.health*2;if p.weapondefs then for g,q in pairs(p.weapondefs)do q.reloadtime=q.reloadtime/1.5;q.range=q.range/2 end end end;for g,r in pairs(a)do if r.builder==true then if r.canfly==true then r.explodeas=''r.selfdestructas=''end end end;local s={'raptor_air_bomber_basic_t2_v1','raptor_air_bomber_basic_t2_v2','raptor_air_bomber_basic_t4_v1','raptor_air_bomber_basic_t4_v2','raptor_air_bomber_basic_t1_v1'}for g,t in pairs(s)do local j=a[t]if j.weapondefs then for g,u in pairs(j.weapondefs)do u.damage.default=u.damage.default/1.30 end end end;local v={'armrespawn','correspawn','legnanotcbase'}for g,i in ipairs(v)do local w=UnitDefs[i]if w then w.cantbetransported,w.footprintx,w.footprintz=0,4,4;w.customparams=w.customparams or{}w.customparams.paratrooper=1;w.customparams.fall_damage_multiplier=0 end end;local UnitDefs=UnitDefs or{}local function x(y)local z={}for A,B in pairs(y)do z[A]=type(B)=="table"and x(B)or B end;return z end;local function C(D,k)for A,B in pairs(k)do if type(B)=="table"then D[A]=D[A]or{}C(D[A],B)elseif D[A]==nil then D[A]=B end end end;local function E(F,G,H)if UnitDefs[F]and not UnitDefs[G]then local z=x(UnitDefs[F])C(z,H)UnitDefs[G]=z end end;local I={{"raptor_land_swarmer_basic_t1_v1","raptor_hive_swarmer_basic",{name="Hive Spawn",customparams={i18n_en_humanname="Hive Spawn",i18n_en_tooltip="Raptor spawned to defend hives from attackers."}}},{"raptor_land_assault_basic_t2_v1","raptor_hive_assault_basic",{name="Armored Assault Raptor",customparams={i18n_en_humanname="Armored Assault Raptor",i18n_en_tooltip="Heavy, slow, and unyielding—these beasts are made to take the hits others cant."}}},{"raptor_land_assault_basic_t4_v1","raptor_hive_assault_heavy",{name="Heavy Armored Assault Raptor",customparams={i18n_en_humanname="Heavy Armored Assault Raptor",i18n_en_tooltip="Lacking speed, these armored monsters make up for it with raw, unbreakable toughness."}}},{"raptor_land_assault_basic_t4_v2","raptor_hive_assault_superheavy",{name="Super Heavy Armored Assault Raptor",customparams={i18n_en_humanname="Super Heavy Armored Assault Raptor",i18n_en_tooltip="These super-heavy armored beasts may be slow, but they’re built to take a pounding and keep rolling."}}},{"raptorartillery","raptor_evolved_motort4",{name="Evolved Lobber",customparams={i18n_en_humanname="Evolved Lobber",i18n_en_tooltip="These lobbers did not just evolve—they became deadlier than anything before them."}}},{"raptor_land_swarmer_basic_t1_v1","raptor_acidspawnling",{name="Acid Spawnling",customparams={i18n_en_humanname="Acid Spawnling",i18n_en_tooltip="This critters are so cute but can be so deadly at the same time."}}}}for g,J in ipairs(I)do E(J[1],J[2],J[3])end;local K=UnitDef_Post;function UnitDef_Post(L,M)if K and K~=UnitDef_Post then K(L,M)end;local N=UnitDefs["raptor_land_swarmer_basic_t1_v1"]and UnitDefs["raptor_land_swarmer_basic_t1_v1"].health;local O={texture1={},texture2={},tracks=0,weaponvelocity=4000,smokePeriod={},smoketime={},smokesize={},smokecolor={},smoketrail=0}local P={accuracy=2048,areaofeffect=256,burst=4,burstrate=0.4,flighttime=12,dance=25,craterareaofeffect=256,edgeeffectiveness=0.7,cegtag="blob_trail_blue",explosiongenerator="custom:genericshellexplosion-huge-bomb",impulsefactor=0.4,intensity=0.3,interceptedbyshieldtype=1,range=2300,reloadtime=10,rgbcolor="0.2 0.5 0.9",size=8,sizedecay=0.09,soundhit="bombsmed2",soundstart="bugarty",sprayangle=2048,tolerance=60000,turnrate=6000,trajectoryheight=2,turret=1,weapontype="Cannon",weaponvelocity=520,startvelocity=140,weaponacceleration=125,weapontimer=0.2,wobble=14500,highTrajectory=1,damage={default=900,shields=600}}local Q={accuracy=1024,areaofeffect=24,burst=1,burstrate=0.3,cegtag="blob_trail_green",edgeeffectiveness=0.63,explosiongenerator="custom:raptorspike-small-sparks-burn",impulsefactor=1,intensity=0.4,interceptedbyshieldtype=1,name="Acid",range=250,reloadtime=1,rgbcolor="0.8 0.99 0.11",size=1,stages=6,soundhit="bloodsplash3",soundstart="alien_bombrel",sprayangle=128,tolerance=5000,turret=1,weapontimer=0.1,weapontype="Cannon",weaponvelocity=320,damage={default=80}}local R={raptor_hive_swarmer_basic={metalcost=350,nochasecategory="OBJECT",icontype="raptor_land_swarmer_basic_t1_v1"},raptor_hive_assault_basic={metalcost=3000,health=25000,speed=20.0,nochasecategory="OBJECT",icontype="raptor_land_assault_basic_t2_v1",weapondefs={aaweapon=O}},raptor_hive_assault_heavy={metalcost=6000,health=30000,speed=17.0,nochasecategory="OBJECT",icontype="raptor_land_assault_basic_t4_v1",weapondefs={aaweapon=O}},raptor_hive_assault_superheavy={metalcost=9000,health=35000,speed=16.0,nochasecategory="OBJECT",icontype="raptor_land_assault_basic_t4_v2",weapondefs={aaweapon=O}},raptor_evolved_motort4={icontype="raptor_allterrain_arty_basic_t4_v1",weapondefs={poopoo=P},weapons={[1]={badtargetcategory="MOBILE",def="poopoo",maindir="0 0 1",maxangledif=50,onlytargetcategory="NOTAIR"}}},raptor_acidspawnling={metalcost=375,energycost=600,health=N*2,icontype="raptor_land_swarmer_basic_t1_v1",buildpic="raptors/raptorh1b.DDS",objectname="Raptors/raptor_droneb.s3o",weapondefs={throwup=Q},weapons={[1]={def="throwup",onlytargetcategory="NOTAIR",maindir="0 0 1",maxangledif=180}}}}for i,S in pairs(R)do local j=UnitDefs[i]if j then for A,B in pairs(S)do if A=="weapondefs"then j.weapondefs=j.weapondefs or{}for T,U in pairs(B)do j.weapondefs[T]=j.weapondefs[T]or{}for V,W in pairs(U)do j.weapondefs[T][V]=W end end elseif A=="weapons"then j.weapons=B else j[A]=B end end end end end