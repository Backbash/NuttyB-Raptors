LS1UNCBEZWZlbmNlcyBOdXR0eUIgQmFsYW5jZQ0KLS0gQXV0aG9yczogSGVkZ2Vob2d6cw0KLS0gZG9jcy5nb29nbGUuY29tL3NwcmVhZHNoZWV0cy9kLzFRU1ZzdUFBTWhCcmhpWmRUaWhWZlNDd1B6YmJaV0RMQ3RYV1AyM0NVMGtvDQpsb2NhbCBhLGIsYyxkLGU9VW5pdERlZnMgb3J7fSx0YWJsZS5tZXJnZSwnbGVnZW5kYXJ5X3B1bHNhcicsJ2xlZ2VuZGFyeV9idWx3YXJrJywnbGVnZW5kYXJ5X2Jhc3Rpb24nYS5sZWdlbmRhcnlfcHVsc2FyPWIoYVsnYXJtYW5uaXQzJ10se25hbWU9J0xlZ2VuZGFyeSBQdWxzYXInLGRlc2NyaXB0aW9uPSdBIHBpbm5hY2xlIG9mIEFybWFkYSBlbmdpbmVlcmluZyB0aGF0IGZpcmVzIGRldmFzdGF0aW5nLCByYXBpZC1maXJlIHRhY2h5b24gYm9sdHMuJyxidWlsZHRpbWU9MzAwMDAwLGhlYWx0aD0zMDAwMCxtZXRhbGNvc3Q9NDM4NDAsZW5lcmd5Y29zdD0xMDk2MDAwLGRhbWFnZW1vZGlmaWVyPTAuMTUsaWNvbnR5cGU9ImFybWFubml0MyIsY3VzdG9tcGFyYW1zPXtpMThuX2VuX2h1bWFubmFtZT0nTGVnZW5kYXJ5IFB1bHNhcicsaTE4bl9lbl90b29sdGlwPSdGaXJlcyBkZXZhc3RhdGluZywgcmFwaWQtZmlyZSB0YWNoeW9uIGJvbHRzLicsdGVjaGxldmVsPTR9LHdlYXBvbmRlZnM9e3RhY2h5b25fYnVyc3RfY2Fubm9uPXtjb2xsaWRlZnJpZW5kbHk9MCxjb2xsaWRlZmVhdHVyZT0wLGF2b2lkZmVhdHVyZT0wLGF2b2lkZnJpZW5kbHk9MCxuYW1lPSdUYWNoeW9uIEJ1cnN0IENhbm5vbicsd2VhcG9udHlwZT0nTGFzZXJDYW5ub24nLHJnYmNvbG9yPScxIDAgMScsYnVyc3Q9MyxidXJzdHJhdGU9MC40MCxyZWxvYWR0aW1lPTUsYWNjdXJhY3k9NDAwLGFyZWFvZmVmZmVjdD0xMixyYW5nZT0xODAwLGVuZXJneXBlcnNob3Q9MTIwMDAsdHVycmV0PXRydWUsc291bmRzdGFydD0nYW5uaWd1bjEnLHNvdW5kaGl0PSd4cGxvbHJnMycsaW1wdWxzZWZhY3Rvcj0wLHdlYXBvbnZlbG9jaXR5PTMxMDAsdGhpY2tuZXNzPTEwLGxhc2VyZmxhcmVzaXplPTgsdGV4dHVyZTM9ImxhcmdlYmVhbSIsdGlsZWxlbmd0aD0xNTAsdG9sZXJhbmNlPTEwMDAwLGJlYW10aW1lPTMsZXhwbG9zaW9uZ2VuZXJhdG9yPSdjdXN0b206dGFjaHlvbnNob3QnLGRhbWFnZT17ZGVmYXVsdD0zMTk1fSxhbGxvd05vbkJsb2NraW5nQWltPXRydWV9fSx3ZWFwb25zPXtbMV09e2JhZHRhcmdldGNhdGVnb3J5PSJWVE9MIEdST1VORFNDT1VUIixkZWY9J3RhY2h5b25fYnVyc3RfY2Fubm9uJyxvbmx5dGFyZ2V0Y2F0ZWdvcnk9J1NVUkZBQ0UnfX19KWEubGVnZW5kYXJ5X2Jhc3Rpb249YihhWydsZWdiYXN0aW9uJ10se25hbWU9J0xlZ2VuZGFyeSBCYXN0aW9uJyxkZXNjcmlwdGlvbj0nVGhlIHVsdGltYXRlIGRlZmVuc2l2ZSBlbXBsYWNlbWVudC4gUHJvamVjdHMgYSBkZXZhc3RhdGluZywgcHVsc2F0aW5nIGhlYXRyYXkuJyxoZWFsdGg9MjIwMDAsbWV0YWxjb3N0PTY1NzYwLGVuZXJneWNvc3Q9MTk4NjUwMCxidWlsZHRpbWU9MTgwMDAwLGZvb3RwcmludHg9Nixmb290cHJpbnR6PTYsaWNvbnR5cGU9ImxlZ2Jhc3Rpb24iLG9iamVjdG5hbWU9J3NjYXZzL3NjYXZiZWFjb25fdDQuczNvJyxzY3JpcHQ9J3NjYXZzL3NjYXZiZWFjb24uY29iJyxidWlsZHBpYz0nc2NhdmVuZ2Vycy9TQ0FWQkVBQ09OLkREUycsZGFtYWdlbW9kaWZpZXI9MC4yMCxjdXN0b21wYXJhbXM9e2kxOG5fZW5faHVtYW5uYW1lPSdMZWdlbmRhcnkgQmFzdGlvbicsaTE4bl9lbl90b29sdGlwPSdQcm9qZWN0cyBhIGRldmFzdGF0aW5nLCBwdWxzYXRpbmcgcHVycGxlIGhlYXRyYXkuJyxtYXhyYW5nZT0xNDUwLHRlY2hsZXZlbD00fSx3ZWFwb25kZWZzPXtsZWdlbmRhcnlfYmFzdGlvbl9yYXk9e2FyZWFvZmVmZmVjdD02NCxhdm9pZGZlYXR1cmU9ZmFsc2UsYXZvaWRmcmllbmRseT10cnVlLGJlYW10aW1lPTAuMyxjYW1lcmFzaGFrZT0wLGNvcmV0aGlja25lc3M9MC4zLGNyYXRlcmFyZWFvZmVmZmVjdD0xMjAsY3JhdGVyYm9vc3Q9MCxjcmF0ZXJtdWx0PTAsZWRnZWVmZmVjdGl2ZW5lc3M9MC40NSxlbmVyZ3lwZXJzaG90PTMwMDAsZXhwbG9zaW9uZ2VuZXJhdG9yPSJjdXN0b206bGFzZXJoaXQtbWVkaXVtLXB1cnBsZSIsZmlyZXN0YXJ0ZXI9OTAsZmlyZXRvbGVyYW5jZT0zMDAsaW1wdWxzZWZhY3Rvcj0wLGxhc2VyZmxhcmVzaXplPTYsbmFtZT0iTGVnZW5kYXJ5IEhlYXQgUmF5Iixub3NlbGZkYW1hZ2U9dHJ1ZSxwcmVkaWN0Ym9vc3Q9MC4zLHByb3hpbWl0eXByaW9yaXR5PTEscmFuZ2U9MTQ1MCxyZWxvYWR0aW1lPTAuMyxyZ2Jjb2xvcj0iMS4wIDAuMiAxLjAiLHJnYmNvbG9yMj0iMC45IDEuMCAwLjUiLHNvdW5kaGl0ZHJ5PSIiLHNvdW5kaGl0d2V0PSJzaXp6bGUiLHNvdW5kc3RhcnQ9ImJhbnRoaWUyIixzb3VuZHN0YXJ0dm9sdW1lPTI1LHNvdW5kdHJpZ2dlcj0xLHRoaWNrbmVzcz01LjUsdHVycmV0PXRydWUsd2VhcG9udHlwZT0iQmVhbUxhc2VyIix3ZWFwb252ZWxvY2l0eT0xNTAwLGFsbG93Tm9uQmxvY2tpbmdBaW09dHJ1ZSxkYW1hZ2U9e2RlZmF1bHQ9NTU1LHZ0b2w9MTV9fX0sd2VhcG9ucz17WzFdPXtiYWR0YXJnZXRjYXRlZ29yeT0nVlRPTCBHUk9VTkRTQ09VVCcsZGVmPSdsZWdlbmRhcnlfYmFzdGlvbl9yYXknLG9ubHl0YXJnZXRjYXRlZ29yeT0nU1VSRkFDRSd9fX0pYVtkXT1iKGFbJ2NvcmRvb210MyddLHtuYW1lPSdMZWdlbmRhcnkgQnVsd2FyaycsZGVzY3JpcHRpb249J0EgcGlubmFjbGUgb2YgZGVmZW5zaXZlIHRlY2hub2xvZ3ksIHRoZSBMZWdlbmRhcnkgQnVsd2FyayBhbm5paGlsYXRlcyBhbGwgd2hvIGFwcHJvYWNoLicsYnVpbGR0aW1lPTI1MDAwMCxoZWFsdGg9NDIwMDAsbWV0YWxjb3N0PTYxNjUwLGVuZXJneWNvc3Q9MTcxMjUwMCxkYW1hZ2Vtb2RpZmllcj0wLjE1LGVuZXJneXN0b3JhZ2U9NTAwMCxyYWRhcmRpc3RhbmNlPTE0MDAsc2lnaHRkaXN0YW5jZT0xMTAwLGljb250eXBlPSJjb3Jkb29tdDMiLGN1c3RvbXBhcmFtcz17aTE4bl9lbl9odW1hbm5hbWU9J0xlZ2VuZGFyeSBCdWx3YXJrJyxpMThuX2VuX3Rvb2x0aXA9J1RoZSB1bHRpbWF0ZSBkZWZlbnNpdmUgc3RydWN0dXJlLicscGFyYWx5emVtdWx0aXBsaWVyPTAuMix0ZWNobGV2ZWw9NH0sd2VhcG9uZGVmcz17bGVnZW5kYXJ5X292ZXJsb2FkX3NjYXR0ZXI9e2NvbGxpZGVmcmllbmRseT0wLGNvbGxpZGVmZWF0dXJlPTAsYXZvaWRmZWF0dXJlPTAsYXZvaWRmcmllbmRseT0wLG5hbWU9J092ZXJsb2FkIFNjYXR0ZXIgQmVhbWVyJyx3ZWFwb250eXBlPSdCZWFtTGFzZXInLHJhbmdlPTEwMDAscmVsb2FkdGltZT0wLjEsc3ByYXlhbmdsZT0yMDAwLHByb2plY3RpbGVzPTEyLHJnYmNvbG9yPScwLjggMC4xIDEuMCcsYWNjdXJhY3k9NTAsYXJlYW9mZWZmZWN0PTgsYmVhbWRlY2F5PTAuMDUsYmVhbXRpbWU9MC4xLGJlYW10dGw9MSxjb3JldGhpY2tuZXNzPTAuMjUsYnVybmJsb3c9dHJ1ZSxjeWxpbmRlcnRhcmdldGluZz0xLGVkZ2VlZmZlY3RpdmVuZXNzPTAuMTUsZXhwbG9zaW9uZ2VuZXJhdG9yPSdjdXN0b206bGFzZXJoaXQtbWVkaXVtLXB1cnBsZScsZmlyZXN0YXJ0ZXI9MTAwLGltcHVsc2VmYWN0b3I9MC4xMjMsaW50ZW5zaXR5PTAuMyxsYXNlcmZsYXJlc2l6ZT00LjM1LG5vc2VsZmRhbWFnZT10cnVlLHNvdW5kaGl0d2V0PSdzaXp6bGUnLHNvdW5kc3RhcnQ9J2JlYW1lcnNob3QyJyx0b2xlcmFuY2U9NTAwMCx0aGlja25lc3M9Nix0dXJyZXQ9dHJ1ZSx3ZWFwb252ZWxvY2l0eT0xMDAwLGRhbWFnZT17ZGVmYXVsdD00NTB9fSxsZWdlbmRhcnlfaGVhdF9yYXk9e2NvbGxpZGVmcmllbmRseT0wLGNvbGxpZGVmZWF0dXJlPTAsYXZvaWRmZWF0dXJlPTAsYXZvaWRmcmllbmRseT0wLG5hbWU9J0FybWFnZWRkb24gSGVhdCBSYXknLHdlYXBvbnR5cGU9J0JlYW1MYXNlcicscmFuZ2U9MTMwMCxyZWxvYWR0aW1lPTQuMCxhcmVhb2ZlZmZlY3Q9NzIsYXZvaWRmZWF0dXJlPWZhbHNlLGJlYW10aW1lPTAuNixjYW1lcmFTaGFrZT0zNTAsY29yZXRoaWNrbmVzcz0wLjQwLGNyYXRlcmFyZWFvZmVmZmVjdD03MixlbmVyZ3lwZXJzaG90PTEyMDAsZXhwbG9zaW9uZ2VuZXJhdG9yPSdjdXN0b206Z2VuZXJpY3NoZWxsZXhwbG9zaW9uLW1lZGl1bS1iZWFtJyxpbXB1bHNlZmFjdG9yPTAsbGFyZ2ViZWFtbGFzZXI9dHJ1ZSxsYXNlcmZsYXJlc2l6ZT04Ljgsbm9zZWxmZGFtYWdlPXRydWUscmdiY29sb3I9JzAuOSAxLjAgMC41JyxyZ2Jjb2xvcjI9JzAuOCAwIDAnLHNjcm9sbHNwZWVkPTUsc291bmRoaXRkcnk9Jycsc291bmRoaXR3ZXQ9J3NpenpsZScsc291bmRzdGFydD0naGVhdHJheTJ4bCcsc291bmR0cmlnZ2VyPTEsdGhpY2tuZXNzPTcsdG9sZXJhbmNlPTEwMDAwLHR1cnJldD10cnVlLHdlYXBvbnZlbG9jaXR5PTE4MDAsZGFtYWdlPXtkZWZhdWx0PTkwMDAsY29tbWFuZGVycz0xMzUwfX0sbGVnZW5kYXJ5X3BvaW50X2RlZmVuc2U9e2NvbGxpZGVmcmllbmRseT0wLGNvbGxpZGVmZWF0dXJlPTAsYXZvaWRmZWF0dXJlPTAsYXZvaWRmcmllbmRseT0wLG5hbWU9J1BvaW50IERlZmVuc2UgTGFzZXInLHdlYXBvbnR5cGU9J0JlYW1MYXNlcicscmFuZ2U9NzUwLHJlbG9hZHRpbWU9MC41LGFyZWFvZmVmZmVjdD0xMixiZWFtdGltZT0wLjMsY29yZXRoaWNrbmVzcz0wLjMyLGVuZXJneXBlcnNob3Q9NTAwLGV4cGxvc2lvbmdlbmVyYXRvcj0nY3VzdG9tOmxhc2VyaGl0LWxhcmdlLWJsdWUnLGZpcmVzdGFydGVyPTkwLGltcGFjdG9ubHk9MSxpbXB1bHNlZmFjdG9yPTAsbGFyZ2ViZWFtbGFzZXI9dHJ1ZSxsYXNlcmZsYXJlc2l6ZT04Ljgsbm9zZWxmZGFtYWdlPXRydWUscHJveGltaXR5cHJpb3JpdHk9MCxyZ2Jjb2xvcj0nMCAwIDEnLHNvdW5kaGl0ZHJ5PScnLHNvdW5kaGl0d2V0PSdzaXp6bGUnLHNvdW5kc3RhcnQ9J2FubmlndW4xJyxzb3VuZHRyaWdnZXI9MSx0ZXh0dXJlMz0nbGFyZ2ViZWFtJyx0aGlja25lc3M9NS41LHRpbGVsZW5ndGg9MTUwLHRvbGVyYW5jZT0xMDAwMCx0dXJyZXQ9dHJ1ZSx3ZWFwb252ZWxvY2l0eT0xNTAwLGRhbWFnZT17ZGVmYXVsdD00NTAsY29tbWFuZGVycz05OTl9fX0sd2VhcG9ucz17WzFdPXtkZWY9J2xlZ2VuZGFyeV9vdmVybG9hZF9zY2F0dGVyJ30sWzJdPXtkZWY9J2xlZ2VuZGFyeV9oZWF0X3JheSd9LFszXT17ZGVmPSdsZWdlbmRhcnlfcG9pbnRfZGVmZW5zZSd9fX0pbG9jYWwgZj17J2FybWFjYScsJ2FybWFjaycsJ2FybWFjc3ViJywnYXJtYWN2JywnY29yYWNhJywnY29yYWNrJywnY29yYWNzdWInLCdjb3JhY3YnLCdsZWdhY2EnLCdsZWdhY2snLCdsZWdhY3YnLCdsZWdjb210MmNvbSd9Zm9yIGcsaCBpbiBwYWlyc3snYXJtJywnY29yJywnbGVnJ31kbyBmb3IgaT0zLDEwIGRvIHRhYmxlLmluc2VydChmLGguLidjb21sdmwnLi5pKWVuZDt0YWJsZS5pbnNlcnQoZixoLi4ndDNhaXJhaWRlJyllbmQ7Zm9yIGcsaiBpbiBwYWlycyhmKWRvIGlmIGFbal10aGVuIGxvY2FsIGg9c3RyaW5nLnN1YihqLDEsMyl0YWJsZS5pbnNlcnQoYVtqXS5idWlsZG9wdGlvbnMsaD09J2FybSdhbmQgYyBvciBoPT0nY29yJ2FuZCBkIG9yIGUpZW5kIGVuZA