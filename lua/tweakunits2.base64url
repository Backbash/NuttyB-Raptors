--NuttyB v1.52 Armada Com
-- Authors: ChrispyNut, BackBash
-- docs.google.com/spreadsheets/d/1QSVsuAAMhBrhiZdTihVfSCwPzbbZWDLCtXWP23CU0ko
{armcom={customparams={evolution_target='armcomlvl2',evolution_condition='timer',evolution_timer=420},energymake=100,metalmake=10,autoheal=55,health=4500,speed=41,canresurrect=1,buildoptions={'armsolar','armwin','armmstor','armestor','armmex','armmakr','armlab','armvp','armap','armeyes','armrad','armdrag','armllt','armrl','armdl','armtide','armuwms','armuwes','armuwmex','armfmkr','armsy','armfdrag','armtl','armfrt','armfrad','armhp','armfhp','armgeo','armamex','armhp','armbeamer','armjamt','armsy','armrectr','armclaw'},weapondefs={armcomlaser={range=330,rgbcolor='0.7 1 1',soundstart='lasrfir1',damage={default=175}},old_armsnipe_weapon={areaofeffect=32,avoidfeature=1,avoidfriendly=1,collidefeature=1,collidefriendly=0,corethickness=0.75,craterareaofeffect=0,craterboost=0,commandfire=1,cratermult=0,cegtag='railgun',duration=0.12,edgeeffectiveness=0.85,energypershot=400,explosiongenerator='custom:laserhit-large-blue',firestarter=100,impulseboost=0.4,impulsefactor=1,intensity=0.8,name='Long-range g2g armor-piercing rifle',range=550,reloadtime=1,rgbcolor='0 1 1',rgbcolor2='0 1 1',soundhit='sniperhit',soundhitwet='sizzle',soundstart='sniper3',soundtrigger=1,stockpile=1,stockpiletime=7,customparams={stockpilelimit=5},texture1='shot',texture2='empty',thickness=4,tolerance=1000,turret=1,weapontype='LaserCannon',weaponvelocity=3000,damage={commanders=100,default=4900}}},weapons={[3]={def='old_armsnipe_weapon',onlytargetcategory='NOTSUB'}}},armcomlvl2={autoheal=90,builddistance=175,canresurrect=1,energymake=315,health=7000,speed=57.5,metalmake=20,workertime=900,buildoptions={'armsolar','armwin','armmstor','armestor','armmex','armmakr','armlab','armvp','armap','armeyes','armrad','armdrag','armllt','armrl','armdl','armtide','armuwms','armuwes','armuwmex','armfmkr','armsy','armfdrag','armtl','armfrt','armfrad','armhp','armfhp','armadvsol','armgeo','armamex','armnanotcplat','armhp','armnanotc','armclaw','armbeamer','armhlt','armguard','armferret','armcir','armjamt','armjuno','armsy','armrectr'},customparams={evolution_target='armcomlvl3',evolution_condition='timer',evolution_timer=900},weapondefs={armcomlaser={areaofeffect=16,avoidfeature=0,beamtime=0.1,corethickness=0.1,craterareaofeffect=0,craterboost=0,cratermult=0,cylindertargeting=1,edgeeffectiveness=1,explosiongenerator='custom:laserhit-small-red',firestarter=70,impactonly=1,impulseboost=0,impulsefactor=0,laserflaresize=7.7,name='Light close-quarters g2g/g2a laser',noselfdamage=1,range=425,reloadtime=0.7,rgbcolor='0 1 1',soundhitdry='',soundhitwet='sizzle',soundstart='lasrfir1',soundtrigger=1,targetmoveerror=0.05,thickness=4,tolerance=10000,turret=1,weapontype='BeamLaser',weaponvelocity=900,damage={default=950,VTOL=150}},old_armsnipe_weapon={areaofeffect=42,avoidfeature=1,avoidfriendly=1,collidefeature=1,collidefriendly=0,corethickness=0.75,craterareaofeffect=0,craterboost=0,commandfire=1,cratermult=0,cegtag='railgun',duration=0.12,edgeeffectiveness=0.85,energypershot=700,explosiongenerator='custom:laserhit-large-blue',firestarter=100,impulseboost=0.4,impulsefactor=1,intensity=1,name='Long-range g2g armor-piercing rifle',range=700,reloadtime=1,rgbcolor='0.2 0.1 1',rgbcolor2='0.2 0.1 1',soundhit='sniperhit',soundhitwet='sizzle',soundstart='sniper3',soundtrigger=1,stockpile=1,stockpiletime=6,customparams={stockpilelimit=10},texture1='shot',texture2='empty',thickness=4,tolerance=1000,turret=1,weapontype='LaserCannon',weaponvelocity=3000,damage={commanders=10,default=11000}}},weapons={[1]={def='armcomlaser',onlytargetcategory='NOTSUB',fastautoretargeting=1},[3]={def='old_armsnipe_weapon',onlytargetcategory='NOTSUB'}}},armcomlvl3={autoheal=50,builddistance=250,canresurrect=1,energymake=2712,health=10000,speed=71.5,metalmake=62,workertime=1500,buildoptions={'armanni','armpb','armamb','armmoho','armuwmme','armflak','armmercury','armgate','armsd','armfort','armtarg','armarad','armamd','armveil','armuwadvms','armuwadves','armmmkr','armclaw','armjuno','armuwmex','armhp','armsy','armfdrag','armtl','armfrt','armfrad','armhp','armlab','armvp','armap','armsy','armuwmmm','armuwfus','armplat','armfdrag','armfhlt','armfflak','armatl','armkraken','armnanotcplat','armbrtha','armannit3','armlwall','armnanotct2','armafus','armfus','armckfus','armraz','armzeus','armsnipe','armvang','armrectr','armgatet3'},customparams={evolution_target='armcomlvl4',evolution_condition='timer',evolution_timer=420},weapondefs={old_armsnipe_weapon={areaofeffect=64,avoidfeature=1,avoidfriendly=1,collidefeature=1,collidefriendly=0,corethickness=0.75,craterareaofeffect=0,craterboost=0,commandfire=1,cratermult=0,cegtag='railgun',duration=0.12,edgeeffectiveness=1,energypershot=2000,explosiongenerator='custom:laserhit-large-blue',firestarter=100,impulseboost=0.4,impulsefactor=1,intensity=1.4,name='Long-range g2g armor-piercing rifle',range=1250,reloadtime=.5,rgbcolor='0.4 0.1 0.7',rgbcolor2='0.4 0.1 0.7',soundhit='sniperhit',soundhitwet='sizzle',soundstart='sniper3',soundtrigger=1,stockpile=1,stockpiletime=3,customparams={stockpilelimit=10},texture1='shot',texture2='empty',thickness=6,tolerance=1000,turret=1,weapontype='LaserCannon',weaponvelocity=3000,damage={commanders=10,default=35000}},armcomlaser={areaofeffect=12,avoidfeature=0,beamtime=0.1,corethickness=0.1,craterareaofeffect=0,craterboost=0,cratermult=0,cylindertargeting=1,edgeeffectiveness=1,explosiongenerator='custom:laserhit-small-red',firestarter=70,impactonly=1,impulseboost=0,impulsefactor=0,laserflaresize=7.7,name='Light close-quarters g2g/g2a laser',noselfdamage=1,range=500,reloadtime=0.6,rgbcolor='0.1 0 1',soundhitdry='',soundhitwet='sizzle',soundstart='lasrcrw2',soundtrigger=1,targetmoveerror=0.05,thickness=6,tolerance=10000,turret=1,weapontype='BeamLaser',weaponvelocity=900,damage={default=1450,VTOL=180}}},weapons={[5]={badtargetcategory='MOBILE',def='armcomlaser',onlytargetcategory='NOTSUB',fastautoretargeting=1},[3]={def='old_armsnipe_weapon',onlytargetcategory='NOTSUB'},[4]={def=''},[1]={def=''},[6]={def=''}}},armcomlvl4={autoheal=150,builddistance=300,canresurrect=1,energymake=3112,health=20000,speed=82,metalmake=86,workertime=2000,buildoptions={'armanni','armpb','armamb','armmoho','armuwmme','armflak','armmercury','armgate','armsd','armfort','armtarg','armarad','armamd','armveil','armuwadvms','armuwadves','armmmkr','armclaw','armjuno','armuwmex','armhp','armsy','armfdrag','armtl','armfrt','armfrad','armhp','armlab','armvp','armap','armsy','armuwmmm','armuwfus','armplat','armfdrag','armfhlt','armfflak','armatl','armkraken','armnanotcplat','armbrtha','armannit3','armlwall','armnanotct2','armafus','armfus','armckfus','armraz','armzeus','armsnipe','armvang','armrectr','armgatet3','legendary_pulsar','armnanotct3'},weapondefs={old_armsnipe_weapon={areaofeffect=72,avoidfeature=1,avoidfriendly=1,collidefeature=1,collidefriendly=0,corethickness=0.75,craterareaofeffect=0,craterboost=0,commandfire=1,cratermult=0,cegtag='railgun',duration=0.12,edgeeffectiveness=1,energypershot=2000,explosiongenerator='custom:laserhit-large-blue',firestarter=100,impulseboost=0.4,impulsefactor=1,intensity=1.4,name='Long-range g2g armor-piercing rifle',range=1250,reloadtime=.5,rgbcolor='0.4 0.1 0.7',rgbcolor2='0.4 0.1 0.7',soundhit='sniperhit',soundhitwet='sizzle',soundstart='sniper3',soundtrigger=1,stockpile=1,stockpiletime=2,customparams={stockpilelimit=15},texture1='shot',texture2='empty',thickness=6,tolerance=1000,turret=1,weapontype='LaserCannon',weaponvelocity=3000,damage={commanders=10,default=45000}},ata={areaofeffect=16,avoidfeature=0,beamtime=1.25,collidefriendly=0,corethickness=0.5,craterareaofeffect=0,craterboost=0,cratermult=0,edgeeffectiveness=0.30,energypershot=7000,explosiongenerator='custom:laserhit-large-blue',firestarter=90,impulsefactor=0,largebeamlaser=1,laserflaresize=7,name='Heavy long-range g2g tachyon accelerator beam',noselfdamage=1,range=1100,reloadtime=15,rgbcolor='1 0 1',scrollspeed=5,soundhitdry='',soundhitwet='sizzle',soundstart='annigun1',soundtrigger=1,texture3='largebeam',thickness=10,tilelength=150,tolerance=10000,turret=1,weapontype='BeamLaser',weaponvelocity=3100,damage={commanders=480,default=48000}},armcomlaser={areaofeffect=12,avoidfeature=0,beamtime=0.1,corethickness=0.1,craterareaofeffect=0,craterboost=0,cratermult=0,cylindertargeting=1,edgeeffectiveness=1,explosiongenerator='custom:laserhit-small-red',firestarter=70,impactonly=1,impulseboost=0,impulsefactor=0,laserflaresize=7.7,name='Light close-quarters g2g/g2a laser',noselfdamage=1,range=550,reloadtime=0.5,rgbcolor='0.659 0 1',soundhitdry='',soundhitwet='sizzle',soundstart='lasrcrw2',soundtrigger=1,targetmoveerror=0.05,thickness=6,tolerance=10000,turret=1,weapontype='BeamLaser',weaponvelocity=900,damage={default=1750,VTOL=200}}},weapons={[1]={def='armcomlaser',onlytargetcategory='NOTSUB',fastautoretargeting=1},[3]={def='old_armsnipe_weapon',onlytargetcategory='NOTSUB'},[4]={badtargetcategory='VTOL GROUNDSCOUT',def='ATA',onlytargetcategory='SURFACE'},[5]={def=''},[6]={def=''}}}}